# Global image definition
image: "$CI_REGISTRY_IMAGE"

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

Build image:
  image: docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build --target base -t $CI_REGISTRY_IMAGE -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE

Run requirements check:
  image: python:3.10
  stage: test
  only:
    - merge_requests
  script:
    - bash tools/ci/run_requirements_check.sh

Code check:
  stage: test
  needs:
    - Run requirements check
  only:
    - merge_requests
  script:
    - bash tools/ci/run_style.sh

Run pytest:
  stage: test
  needs:
    - Run requirements check
  only:
    - merge_requests
  script:
    - bash tools/ci/run_pytest.sh
# run:
#   script:
#     - pip install .
#     # run the command here
#   artifacts:
#     paths:
#       - build/*

# pages:
#   script:
#     - pip install sphinx sphinx-rtd-theme
#     - cd doc
#     - make html
#     - mv build/html/ ../public/
#   artifacts:
#     paths:
#       - public
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# deploy:
#   stage: deploy
#   script: echo "Define your deployment script!"
#   environment: production
